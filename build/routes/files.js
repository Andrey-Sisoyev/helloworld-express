// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var CircularJSON, chooseFile, currentFile, dbDirPath, fs, getAllFileNames, iced, prepareFileData, prettyjson, stringify, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  stringify = require('json-stringify-safe');

  prettyjson = require('prettyjson');

  CircularJSON = require('circular-json');

  dbDirPath = process.env.HOME_SRC_HWE + '/db/files';

  currentFile = void 0;

  exports.register = function(app) {
    return app.get('/file/choose-report', chooseFile);
  };

  exports.extendViewLocals = function(viewLocals, cb_viewLocals) {
    var ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      if (currentFile != null) {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/routes/files.iced",
            funcname: "extendViewLocals"
          });
          prepareFileData(currentFile, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.currentFileData = arguments[0];
              };
            })(viewLocals),
            lineno: 16
          }));
          __iced_deferrals._fulfill();
        })(__iced_k);
      } else {
        return __iced_k();
      }
    })(function() {
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/routes/files.iced",
          funcname: "extendViewLocals"
        });
        getAllFileNames(__iced_deferrals.defer({
          assign_fn: (function(__slot_1) {
            return function() {
              return __slot_1.availFiles = arguments[0];
            };
          })(viewLocals),
          lineno: 17
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb_viewLocals(viewLocals);
      });
    });
  };

  chooseFile = function(req, res) {
    var content, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    currentFile = req.query.fName;
    console.log('AJAX request chooseFile: %s', prettyjson.render(JSON.parse(CircularJSON.stringify(req.query))));
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "src/routes/files.iced",
        funcname: "chooseFile"
      });
      prepareFileData(req.query.fName, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return content = arguments[0];
          };
        })(),
        lineno: 23
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return res.end(content);
    });
  };

  prepareFileData = function(fName, cb_content) {
    var data, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "src/routes/files.iced",
        funcname: "prepareFileData"
      });
      fs.readFile(dbDirPath + '/' + fName, (__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return data = arguments[1];
          };
        })(),
        lineno: 27
      })));
      __iced_deferrals._fulfill();
    })(function() {
      if (typeof err !== "undefined" && err !== null) {
        return cb_content('');
      } else {
        return cb_content(data);
      }
    });
  };

  getAllFileNames = function(cb_files) {
    var err, files, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "src/routes/files.iced",
        funcname: "getAllFileNames"
      });
      fs.readdir(dbDirPath, (__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return files = arguments[1];
          };
        })(),
        lineno: 35
      })));
      __iced_deferrals._fulfill();
    })(function() {
      if (typeof err !== "undefined" && err !== null) {
        throw err;
      } else {
        return cb_files(files);
      }
    });
  };

}).call(this);
